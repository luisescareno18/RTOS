#if CONFIG_FREERTOS_UNICROE
static const BaseType_t app_cpu = 0;
#else
static const BaseType_t app_cpu = 1;
#endif

static int buf[5];                   //Buffer
static int apuntador = 0;        //Index productor

static SemaphoreHandle_t bin_sem;     //

  void Productor(void *parameters){
    int num= 32;
    int i =0;
    Serial.println("Tarea Productor");
    while(1){
      xSemaphoreGive(bin_sem);
      vTaskDelay(200/ portTICK_PERIOD_MS);

      for (i = 0; i <= 10; i += 2) {
      buf[apuntador] = i + num;
      //vTaskDelay(500/ portTICK_PERIOD_MS);
      Serial.println(i);
      
      }

      if (i==9) {
        for (i == 9; i <= 0; i -= 2) {
        buf[apuntador] = i - num;
        //vTaskDelay(1000/ portTICK_PERIOD_MS);
        Serial.println(i);
        }
    }
      buf[apuntador] = num;
      Serial.println("Registro listo");
  }
  }

static void Consumidor(void *parameters){
  int val;
  while(1){
    if (xSemaphoreTake(bin_sem,portMAX_DELAY) == true);
    Serial.println("Consumidor");
    val = buf[apuntador];
    Serial.println(val);
  }
   }

void setup() {
  Serial.begin(115200);

  bin_sem = xSemaphoreCreateBinary();

  xTaskCreatePinnedToCore(Productor,"Productor",1024,NULL,1,NULL, app_cpu);

  xTaskCreatePinnedToCore(Consumidor,"Consumidor",1024,NULL,1,NULL,app_cpu);
 
}

void loop() {

 vTaskDelay(1000/ portTICK_PERIOD_MS);

}
