#if CONFIG_FREERTOS_UNICORE
  static const BaseType_t app_cpu = 0;
#else
  static const BaseType_t app_cpu = 1;
#endif

const int LED1_PIN = 5;
const int LED2_PIN = 18;
const int LED3_PIN = 19;
const int BUTTON_PIN = 2; // Pin para el botón

// Prototipos de tareas
void taskLED1(void *parameters);
void taskLED2(void *parameters);
void taskLED3(void *parameters);
void stopTasksInterrupt(void *parameters);

volatile bool stopTasks = false;

static SemaphoreHandle_t xSemaphore1, xSemaphore2;

void setup() {
  Serial.begin(115200);

  // Configurar pines de los LEDs como salidas
  pinMode(LED1_PIN, OUTPUT);
  pinMode(LED2_PIN, OUTPUT);
  pinMode(LED3_PIN, OUTPUT);

  // Configurar pin del botón como entrada
  pinMode(BUTTON_PIN, INPUT_PULLUP);


  // Crear semáforos
  xSemaphore1 = xSemaphoreCreateBinary();
  xSemaphore2 = xSemaphoreCreateBinary();
 
  
  xTaskCreatePinnedToCore(taskLED1,
                          "LED01",
                          1024,
                          NULL,
                          1,
                          NULL,
                          app_cpu);

  xTaskCreatePinnedToCore(taskLED2,
                            "LED02",
                            1024,
                            NULL,
                            1,
                            NULL,
                            app_cpu);

  xTaskCreatePinnedToCore(taskLED3,
                          "LED03",
                          1024,
                          NULL,
                          1,
                          NULL,
                          app_cpu);


   xTaskCreatePinnedToCore(stopTasksInterrupt,
                          "Interrupcion",
                          1024,
                          NULL,
                          1,
                          NULL,
                          app_cpu);
  xSemaphoreGive(xSemaphore1);
}

void loop() {
  if (stopTasks) {
    // Detener las tareas
    //vTaskSuspendAll();

    // Hacer parpadear el LED1
    for (int i = 0; i < 5; ++i) {
      digitalWrite(LED1_PIN, HIGH);
      delay(200);
      digitalWrite(LED1_PIN, LOW);
      delay(200);
    }

    // Continuar las tareas
    xTaskResumeAll();
    
    stopTasks = false; // Reiniciar la bandera
  }

  vTaskDelay(1000 / portTICK_PERIOD_MS);
}

void taskLED1(void *parameters) {
  while (1) {
    // Esperar a que el semáforo 1 esté disponible antes de encender el LED1
    xSemaphoreTake(xSemaphore1, portMAX_DELAY);

    digitalWrite(LED1_PIN, HIGH);
    delay(500);
    digitalWrite(LED1_PIN, LOW);

    // Liberar el semáforo 2 (indicar que el LED1 ha terminado)
    xSemaphoreGive(xSemaphore2);
  }
}

void taskLED2(void *parameters) {
  while (1) {
    // Esperar a que el semáforo 2 esté disponible antes de encender el LED2
    xSemaphoreTake(xSemaphore2, portMAX_DELAY);

    digitalWrite(LED2_PIN, HIGH);
    delay(500);
    digitalWrite(LED2_PIN, LOW);

    // Liberar el semáforo 1 (indicar que el LED2 ha terminado)
    xSemaphoreGive(xSemaphore1);
  }
}

void taskLED3(void *parameters) {
  while (1) {
    // Esperar a que el semáforo 1 esté disponible antes de encender el LED3
    xSemaphoreTake(xSemaphore1, portMAX_DELAY);

    digitalWrite(LED3_PIN, HIGH);
    delay(500);
    digitalWrite(LED3_PIN, LOW);

    // Liberar el semáforo 2 (indicar que el LED3 ha terminado)
    xSemaphoreGive(xSemaphore2);
  }
}

void stopTasksInterrupt(void *parameters) {
  while (1) {
  xSemaphoreTake(xSemaphore2, portMAX_DELAY); // Esperar a que el semáforo 2 esté disponible antes de iniciar el parpadeo del LED2
  xSemaphoreGive(xSemaphore1);
  // Hacer parpadear el LED2
    if (BUTTON_PIN, LOW) {
      digitalWrite(LED2_PIN, HIGH);
      delay(200);
      digitalWrite(LED2_PIN, LOW);
      delay(200);
    }
  }
}
