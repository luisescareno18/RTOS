#include <Arduino.h>
#include <freertos/FreeRTOS.h>
#include <freertos/task.h>
#include "driver/gpio.h"
#include "driver/adc.h"
#include "driver/ledc.h"
#include <freertos/semphr.h>

#if CONFIG_FREERTOS_UNICORE
static const BaseType_t app_cpu = 0;
#else
static const BaseType_t app_cpu = 1;
#endif 

#define POTENTIOMETER_PIN 34
#define SERVO_PIN 5
#define LM35_PIN A0
#define LED_PIN_TEMP 21
#define BUTTON_COFR_PIN 16
#define PIN_COFR_CERRADO 4
#define PIN_COFR_ABIERTO 2
#define BUTTON_CAJUELA_PIN 17
#define PIN_CAJUELA_CERRADA 18
#define PIN_CAJUELA_ABIERTA 19

SemaphoreHandle_t xMutex;

void servoTask(void *pvParameters);
void temperatureTask(void *pvParameters);
void readPotentiometerTask(void *pvParameters);
void taskCofre(void *pvParameters);
void taskCajuela(void *pvParameters);

void setup() {
  Serial.begin(115200);

  xMutex = xSemaphoreCreateMutex();

  pinMode(LED_PIN_TEMP, OUTPUT);
  pinMode(PIN_COFR_CERRADO, OUTPUT);
  pinMode(PIN_COFR_ABIERTO, OUTPUT);
  pinMode(PIN_CAJUELA_CERRADA, OUTPUT);
  pinMode(PIN_CAJUELA_ABIERTA, OUTPUT);

  xTaskCreatePinnedToCore(servoTask, "ServoTask", 4096, NULL, 1, NULL, app_cpu);
  xTaskCreatePinnedToCore(temperatureTask, "TemperatureTask", 4096, NULL, 1, NULL, app_cpu);
  xTaskCreatePinnedToCore(readPotentiometerTask, "PotTask", 4096, NULL, 1, NULL, app_cpu);
  xTaskCreatePinnedToCore(taskCofre, "taskCofre", 10000, NULL, 1, NULL, app_cpu);
  xTaskCreatePinnedToCore(taskCajuela, "taskCajuela", 10000, NULL, 1, NULL, app_cpu);
}

void loop() {
  // No es necesario realizar ninguna acción en el bucle principal
}

void servoTask(void *pvParameters) {
  (void)pvParameters;

  int potValue;
  int servoPWM;

  while (1) {
    potValue = analogRead(POTENTIOMETER_PIN);

    // Mapea el valor del potenciómetro a una señal PWM para el servo
    servoPWM = map(potValue, 0, 1023, 0, 255);

    if (xSemaphoreTake(xMutex, (TickType_t)10) == pdTRUE) {
      // Controla el servo utilizando analogWrite
      analogWrite(SERVO_PIN, servoPWM);

      xSemaphoreGive(xMutex);
    }

    vTaskDelay(pdMS_TO_TICKS(20));  // Retardo de 20 ms sin bloquear la tarea
  }
}

void temperatureTask(void *pvParameters) {
  (void)pvParameters;

  while (1) {
    // Lectura del valor analógico del LM35
    int sensorValue = analogRead(LM35_PIN);

    // Convertir el valor analógico a temperatura en grados Celsius
    float temperature = (((sensorValue / 1023.0) * 330.0)/10);
   // float temperature = (sensorValue/1023);
    Serial.print("Temperatura: ");
    Serial.print(temperature);
    Serial.println(" °C");

    if (temperature > 40.0) {
      if (xSemaphoreTake(xMutex, (TickType_t)10) == pdTRUE) {
        digitalWrite(LED_PIN_TEMP, HIGH);  // Enciende el LED de temperatura
        xSemaphoreGive(xMutex);
      }
    } else {
      if (xSemaphoreTake(xMutex, (TickType_t)10) == pdTRUE) {
        digitalWrite(LED_PIN_TEMP, LOW);  // Apaga el LED de temperatura
        xSemaphoreGive(xMutex);
      }
    }

    vTaskDelay(pdMS_TO_TICKS(1000));  // Retardo de 1 segundo
  }
}

void readPotentiometerTask(void *pvParameters) {
  while (1) {
    // Leer el valor del potenciómetro (asumiendo un rango de 0-4095)
    int potValue = adc1_get_raw(ADC1_CHANNEL_6);

    // Convertir potValue a un nivel de brillo del LED (asumiendo un rango de 0-255)
    int ledBrightness = (potValue * 255) / 4095;

    // Configurar el brillo del LED mediante PWM
    ledc_set_duty(LEDC_HIGH_SPEED_MODE, LEDC_CHANNEL_0, ledBrightness);
    ledc_update_duty(LEDC_HIGH_SPEED_MODE, LEDC_CHANNEL_0);

    // Retraso para controlar la frecuencia de ejecución de la tarea
    vTaskDelay(pdMS_TO_TICKS(100));
  }
}

void taskCofre(void *pvParameters) {
  pinMode(PIN_COFR_CERRADO, OUTPUT);
  pinMode(PIN_COFR_ABIERTO, OUTPUT);

  bool cofreAbierto = false;

  while (1) {
    if (digitalRead(BUTTON_COFR_PIN) == HIGH) {
      // El botón del cofre está presionado
      cofreAbierto = !cofreAbierto;

      if (cofreAbierto) {
        // Encender el LED de cofre abierto y apagar el LED de cofre cerrado
        digitalWrite(PIN_COFR_ABIERTO, HIGH);
        digitalWrite(PIN_COFR_CERRADO, LOW);
        Serial.println("LED de cofre abierto encendido");
      } else {
        // Encender el LED de cofre cerrado y apagar el LED de cofre abierto
        digitalWrite(PIN_COFR_ABIERTO, LOW);
        digitalWrite(PIN_COFR_CERRADO, HIGH);
        Serial.println("LED de cofre cerrado encendido");
      }

      // Esperar hasta que se suelte el botón
      while (digitalRead(BUTTON_COFR_PIN) == HIGH) {
        vTaskDelay(10 / portTICK_PERIOD_MS);
      }
    }

    vTaskDelay(10 / portTICK_PERIOD_MS);
  }
}

void taskCajuela(void *pvParameters) {
  pinMode(PIN_CAJUELA_CERRADA, OUTPUT);
  pinMode(PIN_CAJUELA_ABIERTA, OUTPUT);

  bool cajuelaAbierta = false;

  while (1) {
    if (digitalRead(BUTTON_CAJUELA_PIN) == HIGH) {
      // El botón de la cajuela está presionado
      cajuelaAbierta = !cajuelaAbierta;

      if (cajuelaAbierta) {
        // Encender el LED de la cajuela abierta y apagar el LED de la cajuela cerrada
        digitalWrite(PIN_CAJUELA_ABIERTA, HIGH);
        digitalWrite(PIN_CAJUELA_CERRADA, LOW);
        Serial.println("LED de cajuela abierta encendido");
      } else {
        // Encender el LED de la cajuela cerrada y apagar el LED de la cajuela abierta
        digitalWrite(PIN_CAJUELA_ABIERTA, LOW);
        digitalWrite(PIN_CAJUELA_CERRADA, HIGH);
        Serial.println("LED de cajuela cerrada encendido");
      }

      // Esperar hasta que se suelte el botón
      while (digitalRead(BUTTON_CAJUELA_PIN) == HIGH) {
        vTaskDelay(10 / portTICK_PERIOD_MS);
      }
    }

    vTaskDelay(10 / portTICK_PERIOD_MS);
  }
}
