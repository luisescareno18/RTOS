#if CONFIG_FREERTOS_UNICROE
static const BaseType_t app_cpu = 0;
#else
static const BaseType_t app_cpu = 1;
#endif

volatile int turno = 1; // Variable compartida para indicar el turno del proceso

void Task1(void *pvParameters) {
  while (1) {
    // Sección crítica para Task1
    while (turno == 2) {
      vTaskDelay(1); // Esperar hasta que sea el turno de Task1
    }

    // Sección crítica
    Serial.println("Task1 en la sección crítica");

    // Cambiar el turno para dar la oportunidad al otro proceso
    turno = 2;

    // Sección no crítica
    Serial.println("Task1 fuera de la sección crítica");

    vTaskDelay(1000); // Simula algún trabajo en Task1
  }
}

void Task2(void *pvParameters) {
  while (1) {
    // Sección crítica para Task2
    while (turno == 1) {
      vTaskDelay(1); // Esperar hasta que sea el turno de Task2
    }

    // Sección crítica
    Serial.println("Task2 en la sección crítica");

    // Cambiar el turno para dar la oportunidad al otro proceso
    turno = 1;

    // Sección no crítica
    Serial.println("Task2 fuera de la sección crítica");

    vTaskDelay(1000); // Simula algún trabajo en Task2
  }
}

void setup() {
  Serial.begin(9600);

  xTaskCreate(Task1,
             "Task1",
              1000,
              NULL,
              1,
              NULL);
  xTaskCreate(Task2,
             "Task2",
              1000,
              NULL,
              1,
              NULL);

  vTaskStartScheduler();
}

void loop() {
  // No deberías tener código en el loop si estás utilizando FreeRTOS
}
